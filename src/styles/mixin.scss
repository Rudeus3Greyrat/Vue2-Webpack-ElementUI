@import './variables';


@each $colorKey,
$color in $colors {
    .text-#{$colorKey} {
        color: $color;
    }

    .bg-#{$colorKey} {
        background-color: $color;
    }

    .bc-#{$colorKey} {
        border-color: $color;
    }
}

// text align
@each $var in (left, center, right) {
    .text-#{$var} {
        text-align: $var !important;
    }
}

@each $sizeKey,
$size in $font-sizes {
    .fs-#{$sizeKey} {
        font-size: $size * $base-font-unit;
    }
}

@each $bs in (top, right, bottom, left) {
    .border-#{$bs} {
        border-#{$bs}: 1px solid $grey;
    }
}

// text overflow
.text-ellipsis {
    display: inline-block;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

// width, height
.w-100 {
    width: 100%;
}

.h-100 {
    height: 100%;
}

.fwb {
    font-weight: bolder;
}

.lh-1 {
    line-height: 1;
}

.rotate180 {
    transform: rotate(180deg);
}

// flex
.d-flex {
    display: flex;
}

.flex-column {
    flex-direction: column;
}

.flex-wrap {
    flex-wrap: wrap;
}

@each $key,
$value in $flex-jc {
    .jc-#{$key} {
        justify-content: $value;
    }
}

@each $key,
$value in $flex-ai {
    .ai-#{$key} {
        align-items: $value;
    }
}

.flex-1 {
    flex: 1;
}

.flex-grow-1 {
    flex-grow: 1;
}

.flex-c {
    display: flex;
    justify-content: center;
    align-items: center;
}

// m-0, mx-0
@each $typeKey,
$type in $spacing-types {

    // .m-1
    @each $sizeKey,
    $size in $spacing-sizes {
        .#{$typeKey}-#{$sizeKey} {
            #{$type}: $size * $spacing-base-unit;
        }
    }

    // .mx-1 , .my-1
    @each $sizeKey,
    $size in $spacing-sizes {
        .#{$typeKey}x-#{$sizeKey} {
            #{$type}-left: $size * $spacing-base-unit;
            #{$type}-right: $size * $spacing-base-unit;
        }

        .#{$typeKey}y-#{$sizeKey} {
            #{$type}-top: $size * $spacing-base-unit;
            #{$type}-bottom: $size * $spacing-base-unit;
        }
    }

    // .mt-1
    @each $directionKey,
    $direction in $spacing-directions {

        @each $sizeKey,
        $size in $spacing-sizes {
            .#{$typeKey}#{$directionKey}-#{$sizeKey} {
                #{$type}-#{$direction}: $size * $spacing-base-unit;
            }
        }
    }
}